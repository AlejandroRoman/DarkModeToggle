[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Set the system's Dark Mode status.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Set the system's Dark Mode status.\n\nIncludes an optional menubar icon and a Hammerspoon console toolbar item.\n\nSample implementation(s):\n```\nhs.loadSpoon(\"DarkModeToggle\")\nspoon.DarkModeToggle:statusMenuIcon(true)      -- show icon in status menu\nspoon.DarkModeToggle:consoleToolbarItem(true)  -- show toolbar item in HS console\n```\n\n```\nhs.loadSpoon(\"DarkModeToggle\")\n-- Toggle Dark Mode with ⌘ + ⌥ + ^ + D\nspoon.DarkModeToggle:bindHotkeys({toggle = {{\"ctrl\",\"option\",\"command\"},\"d\"}})\n```",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "desc" : "Binds hotkeys for DarkModeToggle",
        "stripped_doc" : [
          "Binds hotkeys for DarkModeToggle",
          ""
        ],
        "def" : "DarkModeToggle:bindHotkeys(mapping) -> nil",
        "doc" : "Binds hotkeys for DarkModeToggle\n\nParameters:\n * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:\n   * \"enable\"   - Enable System Dark Mode (including Hammerspoon's console and preferences window)\n   * \"disable\"  - Disable Dark Mode\n   * \"toggle\"   - Toggle Dark Mode\n\nReturns:\n * None\n\nNotes:\n * The action performed by the toggle Dark Mode binding is based on the curent setting of the system, which is the same as the value returned by systemDarkMode()\n * The `mapping` table is a table of one or more key-value pairs of the format:\n   ```\n   command = { { modifiers }, key }\n   ```\n  where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "notes" : [
          " * The action performed by the toggle Dark Mode binding is based on the curent setting of the system, which is the same as the value returned by systemDarkMode()",
          " * The `mapping` table is a table of one or more key-value pairs of the format:",
          "   ```",
          "   command = { { modifiers }, key }",
          "   ```",
          "  where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "signature" : "DarkModeToggle:bindHotkeys(mapping) -> nil",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "name" : "bindHotkeys",
        "parameters" : [
          " * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:",
          "   * \"enable\"   - Enable System Dark Mode (including Hammerspoon's console and preferences window)",
          "   * \"disable\"  - Disable Dark Mode",
          "   * \"toggle\"   - Toggle Dark Mode",
          ""
        ]
      },
      {
        "desc" : "Query or enable the visibility of this spoon's toolbar item in the Hammerspoon console.",
        "stripped_doc" : [
          "Query or enable the visibility of this spoon's toolbar item in the Hammerspoon console.",
          ""
        ],
        "def" : "DarkModeToggle:consoleToolbarItem( [visible, [index] ] ) -> boolean or spoon object or nil",
        "doc" : "Query or enable the visibility of this spoon's toolbar item in the Hammerspoon console.\n\nParameters:\n * An optional boolean indicating the state of the toolbar item's visibility.\n * If the visibility parameter passed is true, an optional index specifying the position where the toolbar item should be placed.\n\nReturns:\n * If no parameters are sent, a boolean indicating the current visibility of the toolbar item.\n * If the visibility parameter is specified, returns the spoon object itself or nil if an error occurred.\n\nNotes:\n * If the visibility parameter is set to true and an index is not specified, the spoon's toolbar item will be placed at the beginning (leftmost) position of the Hammerspoon console's toolbar items.",
        "notes" : [
          " * If the visibility parameter is set to true and an index is not specified, the spoon's toolbar item will be placed at the beginning (leftmost) position of the Hammerspoon console's toolbar items."
        ],
        "signature" : "DarkModeToggle:consoleToolbarItem( [visible, [index] ] ) -> boolean or spoon object or nil",
        "type" : "Method",
        "returns" : [
          " * If no parameters are sent, a boolean indicating the current visibility of the toolbar item.",
          " * If the visibility parameter is specified, returns the spoon object itself or nil if an error occurred.",
          ""
        ],
        "name" : "consoleToolbarItem",
        "parameters" : [
          " * An optional boolean indicating the state of the toolbar item's visibility.",
          " * If the visibility parameter passed is true, an optional index specifying the position where the toolbar item should be placed.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current state of the Dark Mode theme for following three targets simultaneously:",
        "stripped_doc" : [
          "Get or set the current state of the Dark Mode theme for following three targets simultaneously:",
          "* The macOS system for the current user.",
          "* The Hammerspoon console.",
          "* The Hammerspoon preferences panel.",
          ""
        ],
        "def" : "DarkModeToggle:darkMode([mode]) -> boolean(s) or spoon object",
        "doc" : "Get or set the current state of the Dark Mode theme for following three targets simultaneously:\n* The macOS system for the current user.\n* The Hammerspoon console.\n* The Hammerspoon preferences panel.\n\nParameters:\n * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).\n\nReturns:\n * If a mode is specified, the method will return the DarkModeToggle spoon object.\n * If no mode parameter is passed, this method will return three booleans indicating respectively the Dark Mode status for each of the three targets listed previously.",
        "notes" : [

        ],
        "signature" : "DarkModeToggle:darkMode([mode]) -> boolean(s) or spoon object",
        "type" : "Method",
        "returns" : [
          " * If a mode is specified, the method will return the DarkModeToggle spoon object.",
          " * If no mode parameter is passed, this method will return three booleans indicating respectively the Dark Mode status for each of the three targets listed previously."
        ],
        "name" : "darkMode",
        "parameters" : [
          " * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).",
          ""
        ]
      },
      {
        "desc" : "Get the current state of the system's Dark Mode theme.",
        "stripped_doc" : [
          "Get the current state of the system's Dark Mode theme.",
          ""
        ],
        "def" : "DarkModeToggle:isSystemDark() -> boolean",
        "doc" : "Get the current state of the system's Dark Mode theme.\n\nParameters:\n * None\n\nReturns:\n * True if the system is currently set to Dark Mode, false otherwise.\n\nNotes:\n * This method is a simply a wrapper of `hs.host.interfaceStyle()` except it returns a boolean instead of \"Dark\"\/nil",
        "notes" : [
          " * This method is a simply a wrapper of `hs.host.interfaceStyle()` except it returns a boolean instead of \"Dark\"\/nil"
        ],
        "signature" : "DarkModeToggle:isSystemDark() -> boolean",
        "type" : "Method",
        "returns" : [
          " * True if the system is currently set to Dark Mode, false otherwise.",
          ""
        ],
        "name" : "isSystemDark",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Query or set the visibility of this spoon's status menubar icon.",
        "stripped_doc" : [
          "Query or set the visibility of this spoon's status menubar icon.",
          ""
        ],
        "def" : "DarkModeToggle:statusMenuIcon( [visible, [enableDropdown] ] ) -> boolean or spoon object or nil",
        "doc" : "Query or set the visibility of this spoon's status menubar icon.\n\nParameters:\n * An optional boolean indicating the state of the status menubar icon's visibility.\n * If the visibility parameter passed is true, an optional booolean indicating if dropdown menu functionality should be enabled (true). Default value is false.\n\nReturns:\n * If no parameters are sent, a boolean indicating the current visibility of the menubar item.\n   If the visibility parameter was specified, the spoon object itself or nil if an error occurred.",
        "notes" : [

        ],
        "signature" : "DarkModeToggle:statusMenuIcon( [visible, [enableDropdown] ] ) -> boolean or spoon object or nil",
        "type" : "Method",
        "returns" : [
          " * If no parameters are sent, a boolean indicating the current visibility of the menubar item.",
          "   If the visibility parameter was specified, the spoon object itself or nil if an error occurred."
        ],
        "name" : "statusMenuIcon",
        "parameters" : [
          " * An optional boolean indicating the state of the status menubar icon's visibility.",
          " * If the visibility parameter passed is true, an optional booolean indicating if dropdown menu functionality should be enabled (true). Default value is false.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current state of the Dark Mode theme for the current user of the macOS system.",
        "stripped_doc" : [
          "Get or set the current state of the Dark Mode theme for the current user of the macOS system.",
          ""
        ],
        "def" : "DarkModeToggle:systemDarkMode([mode]) -> boolean or spoon object",
        "doc" : "Get or set the current state of the Dark Mode theme for the current user of the macOS system.\n\nParameters:\n * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).\n\nReturns:\n * If no mode parameter is passed, this method will return a boolean indicating if the system's Dark Mode theme is enabled.\n * If a mode is specified, this method will return the DarkModeToggle spoon object.",
        "notes" : [

        ],
        "signature" : "DarkModeToggle:systemDarkMode([mode]) -> boolean or spoon object",
        "type" : "Method",
        "returns" : [
          " * If no mode parameter is passed, this method will return a boolean indicating if the system's Dark Mode theme is enabled.",
          " * If a mode is specified, this method will return the DarkModeToggle spoon object."
        ],
        "name" : "systemDarkMode",
        "parameters" : [
          " * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).",
          ""
        ]
      },
      {
        "desc" : "Toggle the current state of the Dark Mode theme for following three targets simultaneously:",
        "stripped_doc" : [
          "Toggle the current state of the Dark Mode theme for following three targets simultaneously:",
          "* The macOS system for the current user,",
          "* The Hammerspoon console.",
          "* The Hammerspoon preferences panel.",
          ""
        ],
        "def" : "DarkModeToggle:toggleDarkMode() -> spoon object",
        "doc" : "Toggle the current state of the Dark Mode theme for following three targets simultaneously:\n* The macOS system for the current user,\n* The Hammerspoon console.\n* The Hammerspoon preferences panel.\n\nParameters:\n * None\n\nReturns:\n * The DarkModeToggle object.\n\nNotes:\n * The target mode of the toggle action is based on the current Dark Mode state of the operating system.",
        "notes" : [
          " * The target mode of the toggle action is based on the current Dark Mode state of the operating system."
        ],
        "signature" : "DarkModeToggle:toggleDarkMode() -> spoon object",
        "type" : "Method",
        "returns" : [
          " * The DarkModeToggle object.",
          ""
        ],
        "name" : "toggleDarkMode",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Binds hotkeys for DarkModeToggle",
        "stripped_doc" : [
          "Binds hotkeys for DarkModeToggle",
          ""
        ],
        "def" : "DarkModeToggle:bindHotkeys(mapping) -> nil",
        "doc" : "Binds hotkeys for DarkModeToggle\n\nParameters:\n * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:\n   * \"enable\"   - Enable System Dark Mode (including Hammerspoon's console and preferences window)\n   * \"disable\"  - Disable Dark Mode\n   * \"toggle\"   - Toggle Dark Mode\n\nReturns:\n * None\n\nNotes:\n * The action performed by the toggle Dark Mode binding is based on the curent setting of the system, which is the same as the value returned by systemDarkMode()\n * The `mapping` table is a table of one or more key-value pairs of the format:\n   ```\n   command = { { modifiers }, key }\n   ```\n  where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "notes" : [
          " * The action performed by the toggle Dark Mode binding is based on the curent setting of the system, which is the same as the value returned by systemDarkMode()",
          " * The `mapping` table is a table of one or more key-value pairs of the format:",
          "   ```",
          "   command = { { modifiers }, key }",
          "   ```",
          "  where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "signature" : "DarkModeToggle:bindHotkeys(mapping) -> nil",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "name" : "bindHotkeys",
        "parameters" : [
          " * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:",
          "   * \"enable\"   - Enable System Dark Mode (including Hammerspoon's console and preferences window)",
          "   * \"disable\"  - Disable Dark Mode",
          "   * \"toggle\"   - Toggle Dark Mode",
          ""
        ]
      },
      {
        "desc" : "Query or enable the visibility of this spoon's toolbar item in the Hammerspoon console.",
        "stripped_doc" : [
          "Query or enable the visibility of this spoon's toolbar item in the Hammerspoon console.",
          ""
        ],
        "def" : "DarkModeToggle:consoleToolbarItem( [visible, [index] ] ) -> boolean or spoon object or nil",
        "doc" : "Query or enable the visibility of this spoon's toolbar item in the Hammerspoon console.\n\nParameters:\n * An optional boolean indicating the state of the toolbar item's visibility.\n * If the visibility parameter passed is true, an optional index specifying the position where the toolbar item should be placed.\n\nReturns:\n * If no parameters are sent, a boolean indicating the current visibility of the toolbar item.\n * If the visibility parameter is specified, returns the spoon object itself or nil if an error occurred.\n\nNotes:\n * If the visibility parameter is set to true and an index is not specified, the spoon's toolbar item will be placed at the beginning (leftmost) position of the Hammerspoon console's toolbar items.",
        "notes" : [
          " * If the visibility parameter is set to true and an index is not specified, the spoon's toolbar item will be placed at the beginning (leftmost) position of the Hammerspoon console's toolbar items."
        ],
        "signature" : "DarkModeToggle:consoleToolbarItem( [visible, [index] ] ) -> boolean or spoon object or nil",
        "type" : "Method",
        "returns" : [
          " * If no parameters are sent, a boolean indicating the current visibility of the toolbar item.",
          " * If the visibility parameter is specified, returns the spoon object itself or nil if an error occurred.",
          ""
        ],
        "name" : "consoleToolbarItem",
        "parameters" : [
          " * An optional boolean indicating the state of the toolbar item's visibility.",
          " * If the visibility parameter passed is true, an optional index specifying the position where the toolbar item should be placed.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current state of the Dark Mode theme for following three targets simultaneously:",
        "stripped_doc" : [
          "Get or set the current state of the Dark Mode theme for following three targets simultaneously:",
          "* The macOS system for the current user.",
          "* The Hammerspoon console.",
          "* The Hammerspoon preferences panel.",
          ""
        ],
        "def" : "DarkModeToggle:darkMode([mode]) -> boolean(s) or spoon object",
        "doc" : "Get or set the current state of the Dark Mode theme for following three targets simultaneously:\n* The macOS system for the current user.\n* The Hammerspoon console.\n* The Hammerspoon preferences panel.\n\nParameters:\n * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).\n\nReturns:\n * If a mode is specified, the method will return the DarkModeToggle spoon object.\n * If no mode parameter is passed, this method will return three booleans indicating respectively the Dark Mode status for each of the three targets listed previously.",
        "notes" : [

        ],
        "signature" : "DarkModeToggle:darkMode([mode]) -> boolean(s) or spoon object",
        "type" : "Method",
        "returns" : [
          " * If a mode is specified, the method will return the DarkModeToggle spoon object.",
          " * If no mode parameter is passed, this method will return three booleans indicating respectively the Dark Mode status for each of the three targets listed previously."
        ],
        "name" : "darkMode",
        "parameters" : [
          " * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).",
          ""
        ]
      },
      {
        "desc" : "Get the current state of the system's Dark Mode theme.",
        "stripped_doc" : [
          "Get the current state of the system's Dark Mode theme.",
          ""
        ],
        "def" : "DarkModeToggle:isSystemDark() -> boolean",
        "doc" : "Get the current state of the system's Dark Mode theme.\n\nParameters:\n * None\n\nReturns:\n * True if the system is currently set to Dark Mode, false otherwise.\n\nNotes:\n * This method is a simply a wrapper of `hs.host.interfaceStyle()` except it returns a boolean instead of \"Dark\"\/nil",
        "notes" : [
          " * This method is a simply a wrapper of `hs.host.interfaceStyle()` except it returns a boolean instead of \"Dark\"\/nil"
        ],
        "signature" : "DarkModeToggle:isSystemDark() -> boolean",
        "type" : "Method",
        "returns" : [
          " * True if the system is currently set to Dark Mode, false otherwise.",
          ""
        ],
        "name" : "isSystemDark",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Query or set the visibility of this spoon's status menubar icon.",
        "stripped_doc" : [
          "Query or set the visibility of this spoon's status menubar icon.",
          ""
        ],
        "def" : "DarkModeToggle:statusMenuIcon( [visible, [enableDropdown] ] ) -> boolean or spoon object or nil",
        "doc" : "Query or set the visibility of this spoon's status menubar icon.\n\nParameters:\n * An optional boolean indicating the state of the status menubar icon's visibility.\n * If the visibility parameter passed is true, an optional booolean indicating if dropdown menu functionality should be enabled (true). Default value is false.\n\nReturns:\n * If no parameters are sent, a boolean indicating the current visibility of the menubar item.\n   If the visibility parameter was specified, the spoon object itself or nil if an error occurred.",
        "notes" : [

        ],
        "signature" : "DarkModeToggle:statusMenuIcon( [visible, [enableDropdown] ] ) -> boolean or spoon object or nil",
        "type" : "Method",
        "returns" : [
          " * If no parameters are sent, a boolean indicating the current visibility of the menubar item.",
          "   If the visibility parameter was specified, the spoon object itself or nil if an error occurred."
        ],
        "name" : "statusMenuIcon",
        "parameters" : [
          " * An optional boolean indicating the state of the status menubar icon's visibility.",
          " * If the visibility parameter passed is true, an optional booolean indicating if dropdown menu functionality should be enabled (true). Default value is false.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current state of the Dark Mode theme for the current user of the macOS system.",
        "stripped_doc" : [
          "Get or set the current state of the Dark Mode theme for the current user of the macOS system.",
          ""
        ],
        "def" : "DarkModeToggle:systemDarkMode([mode]) -> boolean or spoon object",
        "doc" : "Get or set the current state of the Dark Mode theme for the current user of the macOS system.\n\nParameters:\n * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).\n\nReturns:\n * If no mode parameter is passed, this method will return a boolean indicating if the system's Dark Mode theme is enabled.\n * If a mode is specified, this method will return the DarkModeToggle spoon object.",
        "notes" : [

        ],
        "signature" : "DarkModeToggle:systemDarkMode([mode]) -> boolean or spoon object",
        "type" : "Method",
        "returns" : [
          " * If no mode parameter is passed, this method will return a boolean indicating if the system's Dark Mode theme is enabled.",
          " * If a mode is specified, this method will return the DarkModeToggle spoon object."
        ],
        "name" : "systemDarkMode",
        "parameters" : [
          " * An optional boolean, specifying whether Dark Mode should be enabled (true) or disabled (false).",
          ""
        ]
      },
      {
        "desc" : "Toggle the current state of the Dark Mode theme for following three targets simultaneously:",
        "stripped_doc" : [
          "Toggle the current state of the Dark Mode theme for following three targets simultaneously:",
          "* The macOS system for the current user,",
          "* The Hammerspoon console.",
          "* The Hammerspoon preferences panel.",
          ""
        ],
        "def" : "DarkModeToggle:toggleDarkMode() -> spoon object",
        "doc" : "Toggle the current state of the Dark Mode theme for following three targets simultaneously:\n* The macOS system for the current user,\n* The Hammerspoon console.\n* The Hammerspoon preferences panel.\n\nParameters:\n * None\n\nReturns:\n * The DarkModeToggle object.\n\nNotes:\n * The target mode of the toggle action is based on the current Dark Mode state of the operating system.",
        "notes" : [
          " * The target mode of the toggle action is based on the current Dark Mode state of the operating system."
        ],
        "signature" : "DarkModeToggle:toggleDarkMode() -> spoon object",
        "type" : "Method",
        "returns" : [
          " * The DarkModeToggle object.",
          ""
        ],
        "name" : "toggleDarkMode",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "DarkModeToggle"
  }
]